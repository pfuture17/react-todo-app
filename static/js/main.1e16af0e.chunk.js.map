{"version":3,"sources":["redux/reducer.js","components/AddTask.js","components/TaskRow.js","components/TaskTable.js","App.js","reportWebVitals.js","redux/store.js","index.js"],"names":["taskCopy","connect","dispatch","addTask","newTask","type","payload","tasks","useState","setNewTask","errorMessage","setNewErrorMessage","className","value","onChange","e","target","onClick","trim","filter","task","name","toLowerCase","length","status","deleteTask","doneTask","TaskTable","map","state","pendingTasks","doneTasks","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","reducer","action","filteredTask","find","push","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1e16af0e.chunk.js","sourcesContent":["const initialState = {\r\n    tasks: [\r\n        { name: 'eat', status: 'pending'},\r\n        { name: 'code', status: 'pending'},\r\n        { name: 'sleep', status: 'done'},\r\n      ],\r\n}\r\n\r\nlet taskCopy;\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case 'DELETE_TASK':\r\n            taskCopy = [...state.tasks]\r\n            let filteredTask = taskCopy.filter( task => {\r\n                return (task.name !== action.payload.name)\r\n            })\r\n            return {\r\n                ...state,\r\n                tasks:filteredTask\r\n            }\r\n        case 'DONE_TASK':\r\n            taskCopy = [...state.tasks]\r\n            if(taskCopy.filter(task => task.status === 'done').length === 12) {\r\n                return state\r\n            }else  {\r\n                taskCopy.find(task => task.name === action.payload.name).status='done'\r\n            }\r\n            return {\r\n                ...state,\r\n                tasks:taskCopy\r\n            }\r\n        case 'ADD_TASK':\r\n            let newTask = action.payload\r\n            taskCopy = [...state.tasks]\r\n            taskCopy.push(newTask)\r\n            return {\r\n                ...state,\r\n                tasks:taskCopy\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;","import { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './AddTask.css'\r\n\r\n\r\n\r\nconst AddTask = ({addTask, tasks}) => {\r\n    const [newTask, setNewTask] = useState('');\r\n    const [errorMessage, setNewErrorMessage] = useState('')\r\n\r\n    const addTaskChangeHandler = (e) => {\r\n        setNewTask(e.target.value)\r\n    }\r\n\r\n    const addTaskBtn = () => {\r\n        if(newTask.trim() === \"\"){\r\n            setNewErrorMessage('this field cannot be blank')\r\n        } else if (tasks.filter(task => task.name.toLowerCase() === newTask.toLowerCase().trim()).length > 0 ){\r\n            setNewErrorMessage('task name already taken')\r\n        } else if (tasks.filter (task=> task.status === 'pending').length === 12){\r\n            setNewErrorMessage('max tasks')\r\n        } else {\r\n            let newTaskCopy = {\r\n                name: newTask,\r\n                status: 'pending'\r\n            }\r\n\r\n            addTask(newTaskCopy);\r\n            setNewTask('');\r\n            setNewErrorMessage('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"addTask\">\r\n           <h3>Task Name</h3>\r\n           <span className='error'>\r\n                {errorMessage}    \r\n            </span>\r\n           <input \r\n                type=\"text\"\r\n                value={newTask}\r\n                onChange={addTaskChangeHandler}\r\n            /> <br/>\r\n            <button className='add' onClick={addTaskBtn}>Add Task</button><br/>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        addTask: (newTask) => dispatch({type:'ADD_TASK', payload: newTask})\r\n    }\r\n}\r\n\r\n\r\nexport default connect(null, mapDispatchToProps)(AddTask);","import { connect } from 'react-redux'\r\nimport './TaskRow.css'\r\n\r\n\r\nconst TaskRow = ({task, deleteTask, doneTask}) => {\r\n    return (\r\n        <div>\r\n            <ul>\r\n                <li>\r\n                        {task.name}\r\n                        <div>\r\n                            {\r\n                                task.status === 'pending'?\r\n                                <button className='check' onClick={()=>doneTask(task)}>âœ“</button>: null\r\n                            }\r\n                            <button className='x' onClick={()=>deleteTask(task)}>x</button> \r\n                        </div>\r\n                </li>\r\n            </ul>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        deleteTask: (task) => dispatch({ type: 'DELETE_TASK', payload: task}),\r\n        doneTask: (task) => dispatch({ type: 'DONE_TASK' , payload: task})\r\n\r\n    }\r\n}\r\n\r\nexport default connect (null, mapDispatchToProps)(TaskRow);\r\n","import TaskRow from './TaskRow';\r\n\r\nconst TaskTable = ({ tasks }) => {\r\n    return (\r\n        <div>\r\n           {\r\n               tasks.map((task) => {\r\n                   return <TaskRow task={task} key={task.name}/> \r\n                   \r\n               })\r\n           }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TaskTable","import React from 'react'\nimport AddTask from './components/AddTask'\nimport TaskTable from './components/TaskTable'\nimport { connect } from 'react-redux'\nimport './App.css'\n\nconst App = ({ tasks }) => {\n\n  let pendingTasks = tasks.filter(task => task.status === 'pending');\n  let doneTasks = tasks.filter(task => task.status === 'done');\n  return (\n    <div className=\"App\"> \n    <h1>TO DO APP</h1>\n      <div className=\"App-header\">\n        <AddTask tasks={tasks}/>\n      </div>\n      <div className=\"App-body\">\n        <div className=\"pending\">\n          <h2>Pending Tasks</h2>\n          {\n            pendingTasks.length > 0 ? <TaskTable tasks={pendingTasks}/> : <h2>No Pending Tasks</h2>\n          }\n\n        </div>\n        <div className=\"done\">\n          <h2>Done Tasks</h2>\n          <TaskTable tasks={doneTasks}/>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nconst mapStateToProps = state => {\n  return {\n      tasks: state.tasks\n  }\n}\n\n\nexport default connect(mapStateToProps)(App)","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createStore } from 'redux';\r\nimport reducer from './reducer'\r\n\r\nconst store = createStore(reducer);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from './redux/store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}